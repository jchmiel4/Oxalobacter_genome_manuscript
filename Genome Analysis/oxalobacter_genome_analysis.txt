# Full script analysis for all the genome work...

##### Step 1: View reads using FastQC (v 0.11.9)
fastqc --threads 8 -o ~/ox_project/genomes/analysis/raw_reads/pre_trim_quality/ ~/ox_project/genomes/analysis/raw_reads/*.fastq.gz



##### Step 2: Trim reads using fastp (v 0.23.2)
#run from ~/oxalobacter_genome/raw_reads
fastp -i BAI3_S8_L001_R1_001.fastq.gz -I BAI3_S8_L001_R2_001.fastq.gz -o trimmed_reads/BAI3_trimmed_R1.fastq.gz -O trimmed_reads/BAI3_trimmed_R2.fastq.gz --detect_adapter_for_pe -n 0 -e 27 --cut_front --cut_front_mean_quality 30 --cut_tail --cut_tail_mean_quality 30 -l 35 --json trimmed_reads/BA1.json --html trimmed_reads/BA1.html
#reads in = 2367099 -> reads out = 2227629
#total bases 299357805 -> 277938719

fastp -i OXB_S5_L001_R1_001.fastq.gz -I OXB_S5_L001_R2_001.fastq.gz -o trimmed_reads/OXB_trimmed_R1.fastq.gz -O trimmed_reads/OXB_trimmed_R2.fastq.gz --detect_adapter_for_pe -n 0 -e 27 --cut_front --cut_front_mean_quality 30 --cut_tail --cut_tail_mean_quality 30 -l 35 --json trimmed_reads/OxB.json --html trimmed_reads/OxB.html
#reads in = 1816125 -> reads out = 1613573
#total bases 235852571 -> 206735707

fastp -i OXGP2_S4_L001_R1_001.fastq.gz -I OXGP2_S4_L001_R2_001.fastq.gz -o trimmed_reads/OXGP2_trimmed_R1.fastq.gz -O trimmed_reads/OXGP2_trimmed_R2.fastq.gz --detect_adapter_for_pe -n 0 -e 27 --cut_front --cut_front_mean_quality 30 --cut_tail --cut_tail_mean_quality 30 -l 35 --json trimmed_reads/OxGP1.json --html trimmed_reads/OxGP1.html
#reads in = 2621533 -> reads out = 2474251
#total bases 349951838 -> 324704383



##### Step 3: View reads using FastQC
fastqc --threads 8 -o ~/ox_project/genomes/analysis/raw_reads/post_trim_quality/ ~/ox_project/genomes/analysis/raw_reads/trimmed_reads/*.fastq.gz



##### Step 4: Assemble raw reads using spades (version 3.15.3) and unicycler (version 0.5.0)
conda activate spades

python ~/tools/Unicycler/unicycler-runner.py -1 BAI3_trimmed_R1.fastq.gz -2 BAI3_trimmed_R2.fastq.gz --mode normal --verbosity 2 -o unicycler/BA1_auto 
# Kmers 27, 53, 71, 87, 99, 111, 119, 127

python ~/tools/Unicycler/unicycler-runner.py -1 OXB_trimmed_R1.fastq.gz -2 OXB_trimmed_R2.fastq.gz --mode normal --verbosity 2 -o unicycler/OxB_auto 
# Kmers 27, 53, 71, 87, 99, 111, 119, 127

python ~/tools/Unicycler/unicycler-runner.py -1 OXGP2_trimmed_R1.fastq.gz -2 OXGP2_trimmed_R2.fastq.gz --mode normal --verbosity 2 -o unicycler/OxGP1_auto 
# Kmer 27, 53, 71, 87, 99, 111, 119, 127


## Coverage (bbmap)
conda activate bbmap
bbmap.sh in=read1.fq in2=read2.fq ref=contigs.fa covstats=covstats.txt

bbmap.sh in=~/ox_project/genomes/analysis/raw_reads/raw_reads/BAI3_S8_L001_R1_001.fastq.gz in2=~/ox_project/genomes/analysis/raw_reads/raw_reads/BAI3_S8_L001_R2_001.fastq.gz ref=~/ox_project/genomes/analysis/genomes/BA1.fna covstats=BA1_covstats.txt

bbmap.sh in=~/ox_project/genomes/analysis/raw_reads/raw_reads/OXB_S5_L001_R1_001.fastq.gz in2=~/ox_project/genomes/analysis/raw_reads/raw_reads/OXB_S5_L001_R2_001.fastq.gz ref=~/ox_project/genomes/analysis/genomes/OxB.fna covstats=OxB_covstats.txt

bbmap.sh in=~/ox_project/genomes/analysis/raw_reads/raw_reads/OXGP2_S4_L001_R1_001.fastq.gz in2=~/ox_project/genomes/analysis/raw_reads/raw_reads/OXGP2_S4_L001_R2_001.fastq.gz ref=~/ox_project/genomes/analysis/genomes/OxGP1.fna covstats=OxGP1_covstats.txt



##### Step 5: collect all the genomes from NCBI
# Date is Dec 2021
# Go to website: https://www-ncbi-nlm-nih-gov.proxy1.lib.uwo.ca/assembly/
# Search you interest, select the boxes of oens you want, click "Download Assemblies"
# Unzip and move to linux
# folder is /mnt/c/Users/john_/Documents/SCIENCE/Project_oxalobacter/genome_analysis/all_genomes/



##### Step 6: evaluate completeness (CheckM v) and assembly stats (QUAST v)
# CheckM
conda activate pplacer
checkm lineage_wf ~/ox_project/genomes/all_ox ~/ox_project/genomes/all_ox/checkm_output --reduced_tree
# Takes some time... 20 minutes
#completness is found in ~/oxalobacter_genome/genomes/checkm_output/storage/bin_stats_ext.tsv

# QUAST
# Perform this in the folder with the .fna files (do not create a quast folder it will on its own)
conda activate quast
for i in *.fna; do strain=${i%.fna}; quast.py -o ~/ox_project/genomes/analysis/genomes/quast/${strain} ${strain}.fna --threads 8; done



##### Step 7: prokka (v1.14.6)
conda activate prokka 
for i in *.fna; do strain=${i%.fna}; prokka --kingdom Bacteria --gram neg --mincontiglen 200 --genus Oxalobacter --outdir prokka/${strain}/ --prefix ${strain} --force --compliant --rfam --gcode 11 --centre UWO ${strain}.fna; done

# Organize the fasta out puts
# collect all gff, faa, gbk, and ffn files
# run in prokka_output folder
find . -name *.gff -exec cp '{}' "/home/johnny/ox_project/genomes/analysis/genomes/gff" ";"
find . -name *.faa -exec cp '{}' "/home/johnny/ox_project/genomes/analysis/genomes/faa" ";"
find . -name *.ffn -exec cp '{}' "/home/johnny/ox_project/genomes/analysis/genomes/ffn" ";"
find . -name *.gbk -exec cp '{}' "/home/johnny/ox_project/genomes/analysis/genomes/gbk" ";"



##### Step 8: roary v3.13.0
roary -p 8 -i 90 -e -n -v -cd 95 -r -f ~/ox_project/genomes/analysis/genomes/roary/roary_output *.gff
# -p = threads
# -i = blastp identity
# -e = multifasta alignment with PRANK
# -n = fast core alignment with MAFFT
# -v = verbose
# -cd = % isolates needed for core (22/23 = 0.956)
# -r = r plots
# -f = output



##### Step 9: orthofinder v2.5.4
# takes up to 2 hours
conda activate orthofinder
#get the faa (CDS AA output from Prokka) into the OrthoFinder directory
#run 
orthofinder -f ~/ox_project/genomes/analysis/genomes/orthofinder2 -M msa -S blast -t 8
# OrthoFinder assigned 49288 genes (97.8% of total) to 3478 orthogroups. Fifty percent of all genes were in orthogroups with 23 or more genes (G50 was 23) and were contained in the largest 1023 orthogroups (O50 was 1023). There were 1077 orthogroups with all species present and 953 of these consisted entirely of single-copy genes.
# 956 single copy ortholgoues

# align with Muscle v5.1
for i in *.fa; do OG=${i%.fa}; /home/johnny/tools/muscle5.1.linux_intel64 -align $i -output aln/${OG}_aln.fa; done

# TrimAl v1.4.1
for i in *.fa; do OG=${i%.fa}; /home/johnny/tools/trimal/source/trimal -in $i -out trim/${OG}_aln_trim.fa -automated1 -fasta; done


# convert fasta headers to names
for i in *.fa; do python3 /home/johnny/tools/header_to_strain.py $i; done


# concatonate the fasta files
/home/johnny/tools/catfasta2phyml/catfasta2phyml.pl --verbose -f *.fa > concat/SCOSs2.fa
# confirm only 22 headers
grep -c "^>" SCOSs2.fa

# raxml v8.2.12
conda activate raxml
raxmlHPC -f a -u -x 1996 -p 1996 -# autoMRE -m PROTGAMMAAUTO -s SCOSs.fa -o WoOx3 -n auto -T 8
# -f a ==> bootstrap
# -u ==> median on gamma model
# -x seed for bootstrap
# -p seed for parimony inference
# -m model (GTR + Gamma) (Gamma definetly if <50 taxa)
# -# number of runs
# -s alignment file
# -o outgroup name
# -n name



##### Step 10: FastANI v1.32
# Installed with conda
conda activate fastani
# For help
fastANI --help

# Run this
fastANI --queryList query.txt --refList reference.txt -o oxf_ani.txt -k 16 -t 4 --matrix --fragLen 3000



##### Step 11: ComapareM v0.1.2
comparem aai_wf ~/oxalobacter_genome/genomes/prokka_output/compareM.txt ~/oxalobacter_genome/genomes/prokka_output/compareM_output \
--proteins \
--file_ext faa \
--blastp \
--cpus 6



##### Step 12: Other annotations
### Bacteriocins --> BAGEL4 (http://bagel4.molgenrug.nl/index.php)

### Antimicrobial resistance genes --> AMRFinderPlus v3.10.20
conda activate amrfinder
# update database
amrfinder -u

# copy over gff giles and convert  files for amrfinder
for i in *.gff; do strain=${i%.gff}; mkdir ${strain}; perl -pe '/^##FASTA/ && exit; s/(\W)Name=/$1OldName=/i; s/ID=([^;]+)/ID=$1;Name=$1/' ${strain}.gff > ${strain}/${strain}_amrfinder.gff; perl -ne 'print if ($p); /^##FASTA/ && $p++' ${strain}.gff > ${strain}/${strain}_amrfinder.ffn; mv $i ${strain}/; done

# copy over faa files
for i in *.faa; do strain=${i%.faa}; mv $i ~/ox_project/genomes/analysis/genomes/amrfinder/${strain}/; done

# use amrfinder
for i in *; do cd $i; strain=${i%_amrfinder.gff}; amrfinder --plus --gff ${strain}_amrfinder.gff --protein ${strain}.faa -n ${strain}_amrfinder.ffn > ${strain}_amrfinder_results.txt; cd ..; done

# copy to master file
for i in *; do cd $i; strain=${i%_amrfinder.gff}; cp ${strain}_amrfinder_results.txt ~/ox_project/genomes/analysis/genomes/amrfinder/master/; cd ..; done



##### Step 13: Other alignments
### Align 16S with mafft v7.490
mafft --auto master16S.fna > aligned_master16S.fna

### Make tree with raxml
raxmlHPC -f a -u -x 1996 -p 1996 -# autoMRE -m GTRGAMMA -s aligned_master16S.fna -o WoOx3 -n subtree -T 8


